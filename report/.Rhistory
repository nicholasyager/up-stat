col="white",
names.arg=0:4,
xlab="Number of imperfections",
ylab="Probability")
barplot(c(0.41,0.37,0.16,0.05,0.01),space=0,
col="white",
names.arg=0:4,
xlab="Number of imperfections",
ylab="Probability")
vals <- rnorm(1)
barplot(c(0.41,0.37,0.16,0.05,0.01),space=0,
col="white",
names.arg=0:4,
xlab="Number of imperfections",
ylab="Probability")
barplot(c(0.41,0.37,0.16,0.05,0.01),space=0,
col="white",
names.arg=0:4,
xlab="Number of imperfections",
ylab="Probability")
barplot(c(0.41,0.37,0.16,0.05,0.01),space=0,
col="white",
names.arg=0:4,
xlab="Number of imperfections",
ylab="Probability")
mean(x)
pnorm(-3:3, 0, 1)
qnorm(-3:3, 0, 1)
dnorm(-3:3, 0, 1)
mean(x)
x <- rgamma(100, 2, 1)
hist(x)
plot(seq(0,9,0.1),dgamma(seq(0,9,0.1), 2, 1), col="red", type="l",
main="PDF of Gamma Distribution",
xlab="X", ylab="Probability")
2-1.8944
sqrt(2) - 1.213937
timeFactor = 10
# Gradient Functions
gradient <- function(x,y, positionx=10,positiony=10) {
# Basic inverse square.
return(dnorm(x, positionx+runif(1), 3)+
dnorm(y, positiony+runif(1), 3))
}
sniff <- function(x,y,dist=1) {
# Two dimensional smelling
leftSmell = gradient(x-dist, y)
rightSmell = gradient(x+dist, y)
upSmell =  gradient(x, y+dist)
downSmell = gradient(x,y-dist)
x = -leftSmell + rightSmell
y = -downSmell + upSmell
return(c(x = x,y=y))
}
# Agent control
cells <- data.frame(x=runif(10, 0,20), y=runif(10, 0, 20))
require("animation")
z <- matrix(0, ncol=20, nrow=20)
for (i in 1:20){
for (j in 1:20){
z[i,j]<-gradient(i,j)
}
}
saveGIF({
for(time in 1:100) {
contour(1:20, 1:20,z)
for (cellIndex in 1:nrow(cells)){
position <- cells[cellIndex,]
forces <- sniff(position$x,position$y)
points(cells$x[cellIndex],cells$y[cellIndex],pch=19)
startX <- cells$x[cellIndex]
endX <-  cells$x[cellIndex] + forces["x"] * timeFactor
startY <- cells$y[cellIndex]
endY <-  cells$y[cellIndex] + forces["y"] * timeFactor
cells$x[cellIndex]  = cells$x[cellIndex] + forces["x"] * timeFactor
cells$y[cellIndex]  = cells$y[cellIndex] + forces["y"] * timeFactor
arrows(startX, startY, endX, endY, col="red")
print(paste(cellIndex, forces['x']))
}
}
}, interval=0.05, movie.name = "~/animation.gif")
timeFactor = 10
# Gradient Functions
gradient <- function(x,y, positionx=10,positiony=10) {
# Basic inverse square.
return(dnorm(x, positionx+runif(1), 3)+
dnorm(y, positiony+runif(1), 3))
}
sniff <- function(x,y,dist=1) {
# Two dimensional smelling
leftSmell = gradient(x-dist, y)
rightSmell = gradient(x+dist, y)
upSmell =  gradient(x, y+dist)
downSmell = gradient(x,y-dist)
x = -leftSmell + rightSmell
y = -downSmell + upSmell
return(c(x = x,y=y))
}
# Agent control
cells <- data.frame(x=runif(10, 0,20), y=runif(10, 0, 20))
require("animation")
z <- matrix(0, ncol=20, nrow=20)
for (i in 1:20){
for (j in 1:20){
z[i,j]<-gradient(i,j)
}
}
saveGIF({
for(time in 1:100) {
contour(1:20, 1:20,z)
for (cellIndex in 1:nrow(cells)){
position <- cells[cellIndex,]
forces <- sniff(position$x,position$y)
points(cells$x[cellIndex],cells$y[cellIndex],pch=19)
startX <- cells$x[cellIndex]
endX <-  cells$x[cellIndex] + forces["x"] * timeFactor
startY <- cells$y[cellIndex]
endY <-  cells$y[cellIndex] + forces["y"] * timeFactor
cells$x[cellIndex]  = cells$x[cellIndex] + forces["x"] * timeFactor
cells$y[cellIndex]  = cells$y[cellIndex] + forces["y"] * timeFactor
arrows(startX, startY, endX, endY, col="red")
print(paste(cellIndex, forces['x']))
}
}
}, interval=0.05, movie.name = "animation.gif")
timeFactor = 10
# Gradient Functions
gradient <- function(x,y, positionx=10,positiony=10) {
# Basic inverse square.
return(dnorm(x, positionx+runif(1), 3)+
dnorm(y, positiony+runif(1), 3))
}
sniff <- function(x,y,dist=1) {
# Two dimensional smelling
leftSmell = gradient(x-dist, y)
rightSmell = gradient(x+dist, y)
upSmell =  gradient(x, y+dist)
downSmell = gradient(x,y-dist)
x = -leftSmell + rightSmell
y = -downSmell + upSmell
return(c(x = x,y=y))
}
# Agent control
cells <- data.frame(x=runif(20, 0,20), y=runif(20, 0, 20))
require("animation")
z <- matrix(0, ncol=20, nrow=20)
for (i in 1:20){
for (j in 1:20){
z[i,j]<-gradient(i,j)
}
}
saveGIF({
for(time in 1:100) {
contour(1:20, 1:20,z)
for (cellIndex in 1:nrow(cells)){
position <- cells[cellIndex,]
forces <- sniff(position$x,position$y)
points(cells$x[cellIndex],cells$y[cellIndex],pch=19)
startX <- cells$x[cellIndex]
endX <-  cells$x[cellIndex] + forces["x"] * timeFactor
startY <- cells$y[cellIndex]
endY <-  cells$y[cellIndex] + forces["y"] * timeFactor
cells$x[cellIndex]  = cells$x[cellIndex] + forces["x"] * timeFactor
cells$y[cellIndex]  = cells$y[cellIndex] + forces["y"] * timeFactor
arrows(startX, startY, endX, endY, col="red")
print(paste(cellIndex, forces['x']))
}
}
}, interval=0.05, movie.name = "animation.gif")
setwd("~/projects/data_analysis/upstat/report")
days
rm(list=ls())
traffic <- read.csv("UrbanAnalytics2015.csv", sep=" ")
traffic$DateTime <- strptime(traffic$DateTime, "%m/%d/%y %H:%M")
bp <- boxplot(traffic[1:4])
# Remove Outliers
for (col in 1:4) {
traffic[which(traffic[,col] >= bp$stats[5,col]),col] <- NA
}
# Time-based filtering ---------------------------------------------------------
stepsPerDay <- 1440/5
days <- 31
steps = days * stepsPerDay
dayList<-c("Sun.","Mon.","Tues.","Wed.","Thurs.","Fri.","Sat.")
# Bin the volume each day  -----------------------------------------------------
days <- traffic$DateTime[nrow(traffic)]$yday + 356 - traffic$DateTime[1]$yday
weeks = floor(days/7)
matrices <- list()
templates <- list()
for (wday in 0:6) {
## For each weekday, compile a matrix of every week's version and compare
weeklySubset = traffic[which(traffic$DateTime$wday == wday),]
weeklyMatrix <- matrix(NA,ncol=288, nrow=weeks)
for (index in 1:nrow(weeklySubset)) {
dayNumber = 1+  weeklySubset$DateTime[index]$yday + 356 *(weeklySubset$DateTime[index]$year - 113)  - weeklySubset$DateTime[1]$yday
week = 1 + floor(dayNumber/7)
minute = 1 + (weeklySubset$DateTime[index]$min + (60*weeklySubset$DateTime[index]$hour))/5
weeklyMatrix[week, minute] = weeklySubset$Volume[index]
print(paste(week, minute,weeklySubset$Volume[index]))
}
template <- apply(weeklyMatrix, 2, median, na.rm=T)
matrices <- c(matrices, list(weeklyMatrix))
templates <- c(templates, list(template))
}
# Data aggregation
allDays <- matrix(NA, ncol=288, nrow=32*7)
dayIndex = 1
for (week in 1:32) {
for (wday in 1:7) {
allDays[dayIndex,] <- matrices[[wday]][week,]
dayIndex = dayIndex + 1
}
}
# Examine only hourly rates
days <- allDays[,seq(1,288,2)]
princomp(days)
days
princomp(days, na.action=na.omit)
princomp(days, na.action=na.exclude)
days
which(is.infinite(days))
which(is.finite(days))
princomp(days, na.action=na.exclude)
cluster <- clara(days, k=3, samples=100)
require("cluster")
cluster <- clara(days, k=3, samples=100)
plot(cluster)
cluster <- clara(days, k=4, samples=100)
plot(cluster)
cluster <- clara(days, k=3, samples=100)
plot(cluster)
clusplot(cluster)
clusplot(cluster)
clusplot(cluster, main="")
matplot(t(days), type="l", col=cluster$clustering)
par(mar=c(4.1,5.1,2.1,2.1))
clusplot(cluster, main="")
par(mar=c(4.1,4.1,2.1,2.1))
clusplot(cluster, main="")
require(gridExtra)
install.packages("gridExtra")
require("gridExtra")
cluster
cluster$clusinfo
cluster$call
classificationMatrix <- matrix(cluster$clustering, ncol=7, nrow=32, byrow=T)
dayList<-c("Sun.","Mon.","Tues.","Wed.","Thurs.","Fri.","Sat.")
ggplot(melt(classificationMatrix), aes(Var1,Var2, fill=value)) +
scale_fill_gradientn(colours=c("gray","orange","blue"),name="Classification")+
xlab("Day")+
ylab("Day")+
geom_raster() +
theme( panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())+
scale_x_discrete(breaks = seq(1, 32, 1), labels = seq(1,32,1))+
scale_y_discrete(breaks=c("1","2","3","4","5","6","7"), labels=dayList, limits=c(1,2,3,4,5,6,7))
library(ggplot2)
ggplot(melt(classificationMatrix), aes(Var1,Var2, fill=value)) +
scale_fill_gradientn(colours=c("gray","orange","blue"),name="Classification")+
xlab("Day")+
ylab("Day")+
geom_raster() +
theme( panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())+
scale_x_discrete(breaks = seq(1, 32, 1), labels = seq(1,32,1))+
scale_y_discrete(breaks=c("1","2","3","4","5","6","7"), labels=dayList, limits=c(1,2,3,4,5,6,7))
library(reshape2)
ggplot(melt(classificationMatrix), aes(Var1,Var2, fill=value)) +
scale_fill_gradientn(colours=c("gray","orange","blue"),name="Classification")+
xlab("Day")+
ylab("Day")+
geom_raster() +
theme( panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())+
scale_x_discrete(breaks = seq(1, 32, 1), labels = seq(1,32,1))+
scale_y_discrete(breaks=c("1","2","3","4","5","6","7"), labels=dayList, limits=c(1,2,3,4,5,6,7))
ggplot(melt(classificationMatrix), aes(Var1,Var2, fill=value)) +
scale_fill_discrete(colours=c("gray","orange","blue"),name="Classification")+
xlab("Day")+
ylab("Day")+
geom_raster() +
theme( panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())+
scale_x_discrete(breaks = seq(1, 32, 1), labels = seq(1,32,1))+
scale_y_discrete(breaks=c("1","2","3","4","5","6","7"), labels=dayList, limits=c(1,2,3,4,5,6,7))
ggplot(melt(classificationMatrix), aes(Var1,Var2, fill=value)) +
scale_fill_discrete(fill=c("gray","orange","blue"),name="Classification")+
xlab("Day")+
ylab("Day")+
geom_raster() +
theme( panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())+
scale_x_discrete(breaks = seq(1, 32, 1), labels = seq(1,32,1))+
scale_y_discrete(breaks=c("1","2","3","4","5","6","7"), labels=dayList, limits=c(1,2,3,4,5,6,7))
ggplot(melt(classificationMatrix), aes(Var1,Var2, fill=value)) +
scale_fill_discrete(h=1:3,name="Classification")+
xlab("Day")+
ylab("Day")+
geom_raster() +
theme( panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())+
scale_x_discrete(breaks = seq(1, 32, 1), labels = seq(1,32,1))+
scale_y_discrete(breaks=c("1","2","3","4","5","6","7"), labels=dayList, limits=c(1,2,3,4,5,6,7))
ggplot(melt(classificationMatrix), aes(Var1,Var2, fill=value)) +
scale_colour_hue()+
xlab("Day")+
ylab("Day")+
geom_raster() +
theme( panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())+
scale_x_discrete(breaks = seq(1, 32, 1), labels = seq(1,32,1))+
scale_y_discrete(breaks=c("1","2","3","4","5","6","7"), labels=dayList, limits=c(1,2,3,4,5,6,7))
ggplot(melt(classificationMatrix), aes(Var1,Var2, fill=value)) +
scale_colour_hue(value)+
xlab("Day")+
ylab("Day")+
geom_raster() +
theme( panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())+
scale_x_discrete(breaks = seq(1, 32, 1), labels = seq(1,32,1))+
scale_y_discrete(breaks=c("1","2","3","4","5","6","7"), labels=dayList, limits=c(1,2,3,4,5,6,7))
ggplot(melt(classificationMatrix), aes(Var1,Var2, colour=value)) +
scale_colour_hue(value)+
xlab("Day")+
ylab("Day")+
geom_raster() +
theme( panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())+
scale_x_discrete(breaks = seq(1, 32, 1), labels = seq(1,32,1))+
scale_y_discrete(breaks=c("1","2","3","4","5","6","7"), labels=dayList, limits=c(1,2,3,4,5,6,7))
ggplot(melt(classificationMatrix), aes(Var1,Var2, colour=value)) +
scale_colour_hue()+
xlab("Day")+
ylab("Day")+
geom_raster() +
theme( panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())+
scale_x_discrete(breaks = seq(1, 32, 1), labels = seq(1,32,1))+
scale_y_discrete(breaks=c("1","2","3","4","5","6","7"), labels=dayList, limits=c(1,2,3,4,5,6,7))
ggplot(melt(classificationMatrix), aes(Var1,Var2, fill=value)) +
scale_colour_hue()+
xlab("Day")+
ylab("Day")+
geom_raster() +
theme( panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())+
scale_x_discrete(breaks = seq(1, 32, 1), labels = seq(1,32,1))+
scale_y_discrete(breaks=c("1","2","3","4","5","6","7"), labels=dayList, limits=c(1,2,3,4,5,6,7))
ggplot(melt(classificationMatrix), aes(Var1,Var2, fill=value)) +
scale_colour_brewer(palette="Set1")+
xlab("Day")+
ylab("Day")+
geom_raster() +
theme( panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())+
scale_x_discrete(breaks = seq(1, 32, 1), labels = seq(1,32,1))+
scale_y_discrete(breaks=c("1","2","3","4","5","6","7"), labels=dayList, limits=c(1,2,3,4,5,6,7))
ggplot(melt(classificationMatrix), aes(Var1,Var2)) +
scale_colour_brewer(palette="Set1")+
xlab("Day")+
ylab("Day")+
geom_raster() +
theme( panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())+
scale_x_discrete(breaks = seq(1, 32, 1), labels = seq(1,32,1))+
scale_y_discrete(breaks=c("1","2","3","4","5","6","7"), labels=dayList, limits=c(1,2,3,4,5,6,7))
dayList<-c("Sun.","Mon.","Tues.","Wed.","Thurs.","Fri.","Sat.")
ggplot(melt(classificationMatrix), aes(Var1,Var2, fill=value)) +
scale_colour_brewer(palette="Set1")+
xlab("Day")+
ylab("Day")+
geom_raster() +
theme( panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())+
scale_x_discrete(breaks = seq(1, 32, 1), labels = seq(1,32,1))+
scale_y_discrete(breaks=c("1","2","3","4","5","6","7"), labels=dayList, limits=c(1,2,3,4,5,6,7))
ggplot(melt(classificationMatrix), aes(Var1,Var2, fill=value)) +
scale_colour_brewer()+
xlab("Day")+
ylab("Day")+
geom_raster() +
theme( panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())+
scale_x_discrete(breaks = seq(1, 32, 1), labels = seq(1,32,1))+
scale_y_discrete(breaks=c("1","2","3","4","5","6","7"), labels=dayList, limits=c(1,2,3,4,5,6,7))
value
melt(classificationMatrix)
classificationMatrix <- matrix(cluster$clustering, ncol=7, nrow=32, byrow=T)
dayList<-c("Sun.","Mon.","Tues.","Wed.","Thurs.","Fri.","Sat.")
ggplot(melt(classificationMatrix), aes(Var1,Var2, fill=value)) +
scale_fill_gradientn(colours=c("gray","orange","blue"),name="Classification",
guide="legend")+
xlab("Day")+
ylab("Day")+
geom_raster() +
theme( panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())+
scale_x_discrete(breaks = seq(1, 32, 1), labels = seq(1,32,1))+
scale_y_discrete(breaks=c("1","2","3","4","5","6","7"), labels=dayList, limits=c(1,2,3,4,5,6,7))
ggplot(melt(classificationMatrix), aes(Var1,Var2, fill=value)) +
scale_fill_gradientn(colours=c("gray","orange","blue"),name="Classification",
guide="legend",drop=T)+
xlab("Day")+
ylab("Day")+
geom_raster() +
theme( panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())+
scale_x_discrete(breaks = seq(1, 32, 1), labels = seq(1,32,1))+
scale_y_discrete(breaks=c("1","2","3","4","5","6","7"), labels=dayList, limits=c(1,2,3,4,5,6,7))
ggplot(melt(classificationMatrix), aes(Var1,Var2, fill=value)) +
scale_fill_gradientn(colours=c("gray","orange","blue"),name="Classification",
guide="legend",breaks=c(1,2,3))+
xlab("Day")+
ylab("Day")+
geom_raster() +
theme( panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())+
scale_x_discrete(breaks = seq(1, 32, 1), labels = seq(1,32,1))+
scale_y_discrete(breaks=c("1","2","3","4","5","6","7"), labels=dayList, limits=c(1,2,3,4,5,6,7))
ggplot(melt(classificationMatrix), aes(Var1,Var2, fill=value)) +
scale_fill_gradientn(colours=c("gray","orange","blue"),name="Classification",
guide="legend",breaks=c(1,2,3),
labels=c("Sunday","Weekday","Saturday"))+
xlab("Day")+
ylab("Day")+
geom_raster() +
theme( panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())+
scale_x_discrete(breaks = seq(1, 32, 1), labels = seq(1,32,1))+
scale_y_discrete(breaks=c("1","2","3","4","5","6","7"), labels=dayList, limits=c(1,2,3,4,5,6,7))
ggplot(melt(classificationMatrix), aes(Var1,Var2, fill=value)) +
scale_fill_gradientn(colours=c("gray","orange","blue"),name="Classification",
guide="legend",breaks=c(1,2,3),
labels=c("Sunday","Weekday","Saturday"))+
xlab("Day")+
ylab("Day")+
geom_raster() +
theme( panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.position = 'bottom')+
scale_x_discrete(breaks = seq(1, 32, 1), labels = seq(1,32,1))+
scale_y_discrete(breaks=c("1","2","3","4","5","6","7"), labels=dayList, limits=c(1,2,3,4,5,6,7))
clusplot(cluster, main="")
clusplot(cluster, main="",col=c("gray","orange","blue"))
clusplot(cluster, main="",col.p=c("gray","orange","blue"))
cluster$clustering
clusplot(cluster, main="",col.p=c("gray","orange","blue")[cluster$clustering])
par(mar=c(4.1,4.1,2.1,2.1))
plot(volumeMatrices[[1]][2,], type="l",
ylab="Traffic Volume (Vehicles/Hr.)",
xlab="Hour",xaxt="n")
lines(volumeMatrices[[4]][10,], col="blue")
lines(volumeMatrices[[5]][7,], col="orange")
legend("topleft", fill=c("black","blue","orange"),
legend=c("Oct. 20, 2013","Dec. 18, 2013","Thanksgiving"))
axis(1, seq(0,288,12), seq(0, 24, 1))
apply(cors, 2, median)
days <- traffic$DateTime[nrow(traffic)]$yday + 356 - traffic$DateTime[1]$yday
weeks = floor(days/7)
volumeMatrices <- list()
templates <- list()
cors <- matrix(0, nrow=weeks, ncol=7)
for (wday in 0:6) {
## For each weekday, compile a matrix of every week's version and compare
weeklySubset = traffic[which(traffic$DateTime$wday == wday),]
weeklyMatrix <- matrix(NA,ncol=288, nrow=weeks)
for (index in 1:nrow(weeklySubset)) {
dayNumber = 1+  weeklySubset$DateTime[index]$yday + 356 *(weeklySubset$DateTime[index]$year - 113)  - weeklySubset$DateTime[1]$yday
week = 1 + floor(dayNumber/7)
minute = 1 + (weeklySubset$DateTime[index]$min + (60*weeklySubset$DateTime[index]$hour))/5
weeklyMatrix[week, minute] = weeklySubset$Volume[index]
}
template <- apply(weeklyMatrix, 2, median, na.rm=T)
for (week in 1:weeks) {
cors[week, wday+1] <- cor(template,weeklyMatrix[week,], use="na.or.complete")
correlation <- cor(template,weeklyMatrix[week,])
}
volumeMatrices <- c(volumeMatrices, list(weeklyMatrix))
templates <- c(templates, list(template))
}
apply(cors, 2, median)
apply(cors, 2, median)[2:6]
mean(apply(cors, 2, median)[2:6])
mean(apply(var, 2, median)[2:6])
mean(apply(cors, 2, var)[2:6])
apply(cors, 2, var)
names(traffic)
clusplot(cluster, main="")
clusplot(cluster, main="",pt.col=c("gray","orange","blue"))
clusplot(cluster, main="",pt.col=c("gray","orange","blue")[cluster$clustering])
clusplot(cluster, main="",p.col=c("gray","orange","blue")[cluster$clustering])
clusplot(cluster, main="",col.pt=c("gray","orange","blue")[cluster$clustering])
