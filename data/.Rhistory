pt = t/n
reps = 1000
numpull = 7
dat = c()
for (i in 1:reps){
nr = 0
nb = 0
ng = 0
ny = 0
nt = 0
for (i in 1:numpull){
ran = runif(1)
if(ran <= pr) { # pull a red ball
nr = nr + 1
}
if(pr < ran & ran <= (pb + pr)) { # pull a blue ball
nb = nb + 1
}
if((pb + pr) < ran & ran <= (pg + pb + pr)) { # pull a green ball
ng = ng + 1
}
if((pg + pb + pr) < ran & ran <= (py + pg + pb + pr)) { # pull a yellow ball
ny = ny + 1
}
if((py + pg + pb + pr) <= ran) { # pull a taupe ball
nt = nt + 1
}
}
dat = rbind(dat,c(nr,nb,ng,ny,nt))
}
colnames(dat) <- c("Num Red","Num Blue", "Num Green", "Num Yellow", "Num Taupe")
hist(dat)
a1 = summary(dat[,1])
a2 = summary(dat[,2])
a3 = summary(dat[,3])
a4 = summary(dat[,4])
a5 = summary(dat[,5])
plot(1,a1[4],ylim = c(0,numpull),xlim = c(0,6),pch = 19,col = "red")
points(2,a2[4],pch = 19,col = "blue")
points(3,a3[4],pch = 19,col = "green")
points(4,a4[4],pch = 19,col = "yellow")
points(5,a5[4],pch = 19,col = "lightgoldenrod3")
plot(1,a1[4],ylim = c(0,numpull),xlim = c(0,6),pch = 19,col = "red",ylab = "mean")
points(2,a2[4],pch = 19,col = "blue")
points(3,a3[4],pch = 19,col = "green")
points(4,a4[4],pch = 19,col = "yellow")
points(5,a5[4],pch = 19,col = "lightgoldenrod3")
# stats project
# urn with n balls in it, r red balls, b blue balls, g green balls, y yellow balls, and t taupe balls
# parameters
r = 60
b = 40
g = 30
y = 20
t = 10
n = r + b + g + y + t
pr = r/n
pb = b/n
pg = g/n
py = y/n
pt = t/n
reps = 1000
numpull = 7
dat = c()
for (i in 1:reps){
nr = 0
nb = 0
ng = 0
ny = 0
nt = 0
for (i in 1:numpull){
ran = runif(1)
if(ran <= pr) { # pull a red ball
nr = nr + 1
}
if(pr < ran & ran <= (pb + pr)) { # pull a blue ball
nb = nb + 1
}
if((pb + pr) < ran & ran <= (pg + pb + pr)) { # pull a green ball
ng = ng + 1
}
if((pg + pb + pr) < ran & ran <= (py + pg + pb + pr)) { # pull a yellow ball
ny = ny + 1
}
if((py + pg + pb + pr) <= ran) { # pull a taupe ball
nt = nt + 1
}
}
dat = rbind(dat,c(nr,nb,ng,ny,nt))
}
colnames(dat) <- c("Num Red","Num Blue", "Num Green", "Num Yellow", "Num Taupe")
hist(dat)
a1 = summary(dat[,1])
a2 = summary(dat[,2])
a3 = summary(dat[,3])
a4 = summary(dat[,4])
a5 = summary(dat[,5])
plot(1,a1[4],ylim = c(0,numpull),xlim = c(0,6),pch = 19,col = "red",ylab = "mean")
points(2,a2[4],pch = 19,col = "blue")
points(3,a3[4],pch = 19,col = "green")
points(4,a4[4],pch = 19,col = "yellow")
points(5,a5[4],pch = 19,col = "lightgoldenrod3")
points(1,pr*numpull,col = "red")
points(2,pb*numpull,col = "blue")
points(3,pg*numpull,col = "green")
points(4,py*numpull,col = "yellow")
points(5,pt*numpull,col = "lightgoldenrod3")
# stats project
# urn with n balls in it, r red balls, b blue balls, g green balls, y yellow balls, and t taupe balls
# parameters
r = 60
b = 40
g = 30
y = 20
t = 10
n = r + b + g + y + t
pr = r/n
pb = b/n
pg = g/n
py = y/n
pt = t/n
reps = 100
numpull = 7
dat = c()
for (i in 1:reps){
nr = 0
nb = 0
ng = 0
ny = 0
nt = 0
for (i in 1:numpull){
ran = runif(1)
if(ran <= pr) { # pull a red ball
nr = nr + 1
}
if(pr < ran & ran <= (pb + pr)) { # pull a blue ball
nb = nb + 1
}
if((pb + pr) < ran & ran <= (pg + pb + pr)) { # pull a green ball
ng = ng + 1
}
if((pg + pb + pr) < ran & ran <= (py + pg + pb + pr)) { # pull a yellow ball
ny = ny + 1
}
if((py + pg + pb + pr) <= ran) { # pull a taupe ball
nt = nt + 1
}
}
dat = rbind(dat,c(nr,nb,ng,ny,nt))
}
colnames(dat) <- c("Num Red","Num Blue", "Num Green", "Num Yellow", "Num Taupe")
hist(dat)
a1 = summary(dat[,1])
a2 = summary(dat[,2])
a3 = summary(dat[,3])
a4 = summary(dat[,4])
a5 = summary(dat[,5])
plot(1,a1[4],ylim = c(0,numpull),xlim = c(0,6),pch = 19,col = "red",ylab = "mean")
points(2,a2[4],pch = 19,col = "blue")
points(3,a3[4],pch = 19,col = "green")
points(4,a4[4],pch = 19,col = "yellow")
points(5,a5[4],pch = 19,col = "lightgoldenrod3")
points(1,pr*numpull,col = "red")
points(2,pb*numpull,col = "blue")
points(3,pg*numpull,col = "green")
points(4,py*numpull,col = "yellow")
points(5,pt*numpull,col = "lightgoldenrod3")
leg.text=c("Expected","Actual")
leg.col=c("black")
legend("topright",leg.text,col=leg.col,fill=leg.col,title = "Legend")
my.dat = c()
n = 150
for (i in 1:n){
d1 = sample(1:6,1)
d2 = sample(1:6,1)
my.dat[i] = d1 + d2
}
summary(my.dat)
x = my.dat
h = hist(my.dat)
my.dat
my.dat = c()
n = 25
for (i in 1:n){
d1 = sample(1:6,1)
d2 = sample(1:6,1)
my.dat[i] = d1 + d2
}
summary(my.dat)
x = my.dat
h = hist(my.dat)
my.dat
sd(my.dat)
^2
sd(my.dat)^2
sum(1:42)
42*43/2
n = 42
a = 1:n
s = sum(a)
n*(n+1)/2 == s
n = 1000
s = sum(1:n)
(n)*(n+1)*(2n+1)/6 == s
n = 1000
s = sum(1:n)
(n)*(n+1)*(2*n+1)/6 == s
n = 1000
s = sum(1:n)
(n)*(n+1)*(2*n+1)/6
a = 1:n
a
a = a ^ 2
a
s = sum(a)
(n)*(n+1)*(2*n+1)/6 == s
n = 1000
a = (1:n)^2
s = sum(a)
(n)*(n+1)*(2*n+1)/6 == s
a = sum((1:n)^2)
(n)*(n+1)*(2*n+1)/6 == s
set.seed(4)
b <- rnorm(1000 , mean = 56, sd = 2)
b
my.number = b(400) + b(5) + b(962)
b <- rnorm(1000 , mean = 56, sd = 2)
my.number = b[400] + b[5] + b[962]
my.number
a = b(1:length(b),2)
a = b[1:length(b),2]
1:length(b)
b
a = b[1:length(b)%%2 != 0]
a
length(a)
c = b[seq(1,length(b)/2,2)]
c
c = b[seq(1,length(b),2)]
c
a == c
set.seed(3)
m <- matrix(sample(10000,5000),50,100 )
m
m
sq = sqrt(m[23,81])
sq
v = m[,1]
v
va = sort(v,'ascend')
va = sort(v,decreating = FALSE)
va = sort(v,decreasing = FALSE)
vd = sort(v, decreasing = TRUE)
order(m[,1])
m[,1] = order(m[,1])
m
m[,1]
m[1,]
m
m <- matrix(sample(10000,5000),50,100 )
m
m[,1]
order(m[,1])
sort(m[,1])
m[,1] = sort(m[,1])
m
for i = 1:ncol(m){
m[,i] = sort(m[,i])
}
for (i in 1:ncol(m)) {
m[,i] = sort(m[,i])
}
m
m <- matrix(sample(10000,5000),50,100 )
order(m)
for (i in 1:ncol(m)) {
m[i,] = sort(m[i,])
}
ncol(m)
sort(m[2,])
i
m[1,]
m[2,]
for (i in 1:ncol(m)) {
m[i,] = sort(m[i,])
}
i
for (i in 1) {
m[i,] = sort(m[i,])
}
m
for (i in 1:nrow(m)) {
m[i,] = sort(m[i,])
}
m
m
a = b[1:length(b)%%2 == 1]
a
?pch
a = 3
if(a >=3)
{print("TRUE")}
sum(1:100)
temp = 0
while(temp < 25)
{
temp = temp + 2
}
temp
??mfrow
3%%2
10%%15
x <- rand(10)
x <- ran(10)
x <- runif(10)
x
x <- 100*runif(10)
plot(x)
plot(x,type = 'l')
plot(x,type = 'l',col = rainbow(100))
plot(x,type = 'l',col = rainbow(10))
plot(x,type = 'l',col = rainbow(4))
x <- 100*runif(100)
plot(x,type = 'l',col = rainbow(4))
plot(x,col = rainbow(4))
plot(x,col = rainbow(4),pch = 19)
plot(x,col = rainbow(50),pch = 19)
plot(x,col = rainbow(100),pch = 19)
x <- 100*runif(1000)
plot(x,col = rainbow(100),pch = 19)
install.packages("pso")
library(pso)
p <- test.problem("parabola",10) # one local=global minimum
p
set.seed(1)
o1 <- psoptim(p,control=list(trace=1,REPORT=50))
show(o1)
set.seed(1)
o2 <- psoptim(p,control=list(trace=1,REPORT=50,w=c(.7,.1)))
show(o2)
set.seed(1)
o3 <- psoptim(p,control=list(trace=1,REPORT=1,hybrid=TRUE))
show(o3) ## hybrid much faster
set.seed(1)
p <- test.problem("ackley",10)
o1 <- psop
o1 <- psoptim(p,control=list(trace=1,REPORT=50))
show(o1)
signature(o1)
o2 <- psoptim(p,control=list(trace=1,REPORT=50,hybrid=TRUE,
hybrid.control=list(maxit=10)))
show(o2) # better
plot(o1,xlim=c(0,p@maxf),ylim=c(0,100))
lines(o2,col=2) # and much faster convergence
p <- test.problem("rastrigin",10)
set.seed(1)
o1 <- psoptim(p,control=list(trace=1,REPORT=50))
show(o1)
o2 <- psoptim(p,control=list(trace=1,REPORT=50,hybrid=TRUE,
hybrid.control=list(maxit=10)))
show(o2) # better
plot(o1,xlim=c(0,p@maxf),ylim=c(0,100))
lines(o2,col=2) # and much faster convergence
plot(o3,xlim=c(0,p@maxf),ylim=c(0,100))
o3 <- psoptim(p,control=list(trace=1,REPORT=1,hybrid=TRUE))
show(o3) ## hybrid much faster
o3 <- psoptim(p,control=list(trace=1,REPORT=1,hybrid=TRUE))
show(o3) ## hybrid much faster
plot(o3,xlim=c(0,p@maxf),ylim=c(0,100))
lines(o2,col=2) # and much faster convergence
lines(o1,col=3)
set.seed(1)
## Rastrigin function
psoptim(rep(NA,2),function(x) 20+sum(x^2-10*cos(2*pi*x)),
lower=-5,upper=5,control=list(abstol=1e-8))
set.seed(1)
## Rastrigin function - local refinement with L-BFGS-B on improvements
psoptim(rep(NA,2),function(x) 20+sum(x^2-10*cos(2*pi*x)),
lower=-5,upper=5,control=list(abstol=1e-8,hybrid="improved"))
## Griewank function
psoptim(rep(NA,2),function(x) sum(x*x)/4000-prod(cos(x/sqrt(1:2)))+1,
lower=-100,upper=100,control=list(abstol=1e-2))
set.seed(1)
## Rastrigin function with reporting
o <- psoptim(rep(NA,2),function(x) 20+sum(x^2-10*cos(2*pi*x)),
lower=-5,upper=5,control=list(abstol=1e-8,trace=1,REPORT=1,
trace.stats=TRUE))
plot(o$stats$it,o$stats$error,log="y",xlab="It",ylab="Error")
points(o$stats$it,sapply(o$stats$f,min),col="blue",pch=2)
install.packages("beeswarm")
library(beeswarm)
stripchart(decrease ~ treatment, data = OrchardSprays,
vertical = TRUE, log = "y", method = 'jitter', jitter = 0.2, cex = 1,
pch = 16, col = rainbow(8),
main = 'stripchart')
beeswarm(decrease ~ treatment, data = OrchardSprays,
log = TRUE, pch = 16, col = rainbow(8),
main = 'beeswarm')
data(breast)
beeswarm(time_survival ~ ER, data = breast,
pch = 16, pwcol = 1 + as.numeric(event_survival),
xlab = "", ylab = "Follow-up time (months)",
labels = c("ER neg", "ER pos"))
legend("topright", legend = c("Yes", "No"),
title = "Censored", pch = 16, col = 1:2)
beeswarm(formula, data = NULL, subset, na.action = NULL,
pwpch = NULL, pwcol = NULL, pwbg = NULL, dlab, glab, ...)
beeswarm(formula, data = NULL, subset, na.action = NULL,
pwpch = NULL, pwcol = NULL, pwbg = NULL, dlab, glab)
setwd("C:/Users/Owner/Dropbox/Documents/Spring 2015/Modelling Biological Systems (TA)/Homework Files/HW 2")
WHOdata <- read.csv("WHOData.csv")
attach(WHOdata)
model<-nls(cases ~ K/(1+((K-min(cases))/min(cases))*exp(-r*day)),
start=list(K=1000, r=0.5), control=c(maxiter=1000))
summary.info <- summary(model)
r = summary.info$coefficients[2]
k = summary.info$coefficients[1]
r
k
WHOdata
WHOdata <- read.csv("WHOData.csv")
attach(WHOdata)
model<-nls(cases ~ K/(1+((K-min(cases))/min(cases))*exp(-r*day)),
start=list(K=1000, r=0.5), control=c(maxiter=1000))
summary.info <- summary(model)
r = summary.info$coefficients[2]
k = summary.info$coefficients[1]
r
k
plot(x=day, y=cases, main="Model of cases per day",
xlab="Day",
ylab="Number of cases")
(k-min(cases))/min(cases)
log((k-min(cases))/min(cases))
time = log((k-min(cases))/min(cases))/r
time
plot(x=day, y=cases, main="Model of cases per day",
xlab="Day",
ylab="Number of cases")
lines(x=day, y=fitted(model),col="red")
plot(x=day, y=cases, main="Model of cases per day",
xlab="Day",
ylab="Number of cases",xlim = c(0,50))
lines(x=day, y=fitted(model),col="red",xlim = c(0,50))
plot(x=day, y=cases, main="Model of cases per day",
xlab="Day",
ylab="Number of cases",xlim = c(0,50),ylim = c(0,5000))
lines(x=day, y=fitted(model),col="red",xlim = c(0,50))
r
plot(x=day, y=cases, main="Model of cases per day",
xlab="Day",
ylab="Number of cases",xlim = c(0,50),ylim = c(0,5000))
lines(y=fitted(model),col="red",xlim = c(0,50))
lines(x = 1:50,y=fitted(model),col="red",xlim = c(0,50))
fitted(model)
lines(x = days,y=fitted(model),col="red",xlim = c(0,50))
lines(x = day,y=fitted(model),col="red",xlim = c(0,50))
plot(x=day, y=cases, main="Model of cases per day",
xlab="Day",
ylab="Number of cases")
lines(x = day,y=fitted(model),col="red",xlim = c(0,50))
s.M    <- 0.80 # Pr(Oocyst develops into merozoite)
s.TI   <- 0.83 # Pr(Merozoite develops into Type I Meront)
s.TII  <- 0.40 # Pr(Type I Meront develops into Type II Meront)
s.G    <- 0.90 # Pr(Type II Meront develops into gamont)
s.Z    <- 0.89 # Pr(Gamont develops into zygocyst)
s.TnO  <- 0.20 # Pr(Gamont develops into thin-walled Oocyst)
s.TkO  <- 0.80 # Pr(Gamont develops into thick-walled Oocyst)
b.M    <- 0.3  # Pr(Type I Meront produces Merozoites)
b.G    <- 0.5  # Pr(Type II Meront produces a Macrogamont)
n.M    <- 8.0  # Average Number of merozoites created from a Type I Meront
n.G    <- 4.0  # Average Number of gamonts (micro or macro) per type II Meront
## Place 8x8 Matrix Here:
A <- matrix( )
## Solution -----------------
A <- matrix(c(  0,    0,             0,               0,   0,   0, s.TnO, 0,
s.M,    0,     n.M * b.M,               0,   0,   0,     0, 0,
0, s.TI,             0,               0,   0,   0,     0, 0,
0,    0, (1-b.M)*s.TII,               0,   0,   0,     0, 0,
0,    0,             0, s.G * b.G * n.G,   0,   0,     0, 0,
0,    0,             0, s.G * b.G * n.G,   0,   0,     0, 0,
0,    0,             0,               0, s.Z, s.Z,     0, 0,
0,    0,             0,               0,   0,   0, s.TkO, 0),
byrow=T, ncol = 8)
out <- as.matrix(t(N0), nrow = 1, ncol = 8)
x = 21                              # Number of time steps
N0 <- c(100, 0, 0, 0, 0, 0, 0, 0)   # Initial populations
out <- as.matrix(t(N0), nrow = 1, ncol = 8)
N <- N0
for(i in 1:x){
N <- A %*% N
out <- rbind(out,t(N))
}
matplot(out, pch = 16, main = "Population Breakdown",
xlab = "Year",
ylab = "Population", type="l")
nThickWalled <- sum(out[, 8])
out
out
dat = read.csv("UrbanAnalytics2015.csv",sep = " ")
setwd("C:/Users/Owner/Dropbox/Documents/Up-Stat/up-stat/data")
dat = read.csv("UrbanAnalytics2015.csv",sep = " ")
View(dat)
spectrum(dat[,2])
spectrum(diff(dat[,2]))
spectrum(diff(dat[1:1000,2]))
24*7
168*6
spectrum(diff(dat[1:1008,2]))
mean(dat[,3])
plot(dat[1:1008,])
mean(dat[,1])
